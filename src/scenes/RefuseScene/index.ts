import { Scenes } from "telegraf";
import { makePostToTg } from "../../services/api/tgApi";
import { updateSuggestionInfo } from "../../services/suggestion";

import { SceneAlias } from "../../types/scenes";
import { chatLogger } from "../../utils/message";
import { errorHandler } from "../utils";
import {
  getNextSuggestionKeyboard,
  getPreparedForRefuseSuggestion,
  getRefuseMenuKeyboard,
  refuseSuggestion,
} from "./utils";

export enum RefuseKeyboard {
  GetNextSuggestion = "GetNextSuggestion",
  ReturnSuggestion = "ReturnSuggestion",
  UseDefaultPhrase = "UseDefaultPhrase",
  Back = "Back",
  Confirm = "Confirm",
  Cancel = "Cancel",
}

const DEFAULT_CODE_PHRASE = "default";
const defaultText =
  "–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ–º –≤—ã–ª–æ–∂–∏—Ç—å —Ç–≤–æ–π –ø–æ—Å—Ç, —Ç.–∫. –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –∫–∞–Ω–∞–ª–∞. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –≤–∏–¥ —Å—ã—á–µ–≤–∞–ª—å–Ω–∏, –º–æ–∂–µ—à—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã";
const enterText = `–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ \n–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—Ä–∞–∑—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤–∞ <code>/${DEFAULT_CODE_PHRASE}</code>`;
const nextSuggestionText = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç?";
const refuseScene = new Scenes.BaseScene<Scenes.SceneContext>(SceneAlias.Refuse);

refuseScene.enter(async (ctx) => {
  try {
    const chatId = ctx.chat?.id;
    await ctx.reply(enterText);

    const suggestion = await getPreparedForRefuseSuggestion();
    await ctx.reply("–û—Ç–∫–ª–æ–Ω—è–µ–º—ã–π –ø–æ—Å—Ç:", { parse_mode: "HTML" });
    await makePostToTg(
      { photos: suggestion.fileIds, text: suggestion.caption },
      String(chatId),
    );
    await ctx.reply("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", getRefuseMenuKeyboard());
  } catch (error) {
    await chatLogger(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...", error);
    errorHandler(ctx, error);
  }
});

refuseScene.on("text", async (ctx) => {
  try {
    const text = ctx.message.text;
    const suggestion = await getPreparedForRefuseSuggestion();

    // send message to author with notification about post
    await refuseSuggestion(suggestion, text);
    await ctx.reply("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω!");
    await ctx.reply(nextSuggestionText, getNextSuggestionKeyboard());
  } catch (error) {
    await chatLogger(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...", error);
  }
});

refuseScene.action(RefuseKeyboard.GetNextSuggestion, async (ctx) => {
  try {
    const suggestion = await getPreparedForRefuseSuggestion();
    await ctx.reply("–û—Ç–∫–ª–æ–Ω—è–µ–º—ã–π –ø–æ—Å—Ç:");
    await makePostToTg(
      { photos: suggestion.fileIds, text: suggestion.caption },
      String(suggestion.userId),
    );
  } catch (error) {
    await chatLogger(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...", error);
  }
});

refuseScene.action(RefuseKeyboard.ReturnSuggestion, async (ctx) => {
  try {
    const suggestion = await getPreparedForRefuseSuggestion();
    await updateSuggestionInfo({ status: "new", userId: suggestion.userId });
    await ctx.reply("–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞!üòØ");
    await ctx.reply(nextSuggestionText, getNextSuggestionKeyboard());
  } catch (error) {
    await chatLogger(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...", error);
  }
});

refuseScene.action(RefuseKeyboard.UseDefaultPhrase, async (ctx) => {
  try {
    const suggestion = await getPreparedForRefuseSuggestion();
    await refuseSuggestion(suggestion, defaultText);
    await ctx.reply(nextSuggestionText, getNextSuggestionKeyboard());
  } catch (error) {
    await chatLogger(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...", error);
  }
});

refuseScene.action(RefuseKeyboard.Back, async (ctx) => {
  await ctx.scene.enter(SceneAlias.Admin);
});

refuseScene.command("back", async (ctx) => {
  await ctx.scene.enter(SceneAlias.Admin);
});

refuseScene.command(DEFAULT_CODE_PHRASE, async (ctx) => {
  // set default code phrase
});

export default refuseScene;
