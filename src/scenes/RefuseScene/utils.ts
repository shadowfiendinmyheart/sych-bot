import { Markup } from "telegraf";
import { RefuseKeyboard } from ".";
import { ERRORS } from "../../const";
import { makeMessageToTg, makePostToTg } from "../../services/api/tgApi";
import { getSuggestionsByStatus, updateSuggestion } from "../../services/suggestion";
import { Suggestion } from "../../types/suggestion";

export const getRefuseMenuKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É", RefuseKeyboard.ReturnSuggestion)],
    [
      Markup.button.callback(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ñ—Ä–∞–∑—É",
        RefuseKeyboard.UseDefaultPhrase,
      ),
    ],
    [Markup.button.callback("–ù–∞–∑–∞–¥", RefuseKeyboard.Back)],
  ]);
};

export const getNextSuggestionKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback("‚ñ∂Ô∏è", RefuseKeyboard.GetNextSuggestion)],
    [Markup.button.callback("–ù–∞–∑–∞–¥", RefuseKeyboard.Back)],
  ]);
};

export const getConfirmSuggestionKeyboard = () => {
  return Markup.inlineKeyboard([
    [Markup.button.callback("‚úÖ", RefuseKeyboard.Confirm)],
    [Markup.button.callback("üî¥", RefuseKeyboard.Cancel)],
  ]);
};

export const getPreparedForRefuseSuggestion = async () => {
  const preparedForRefuseSuggestions = await getSuggestionsByStatus(
    "preparedForRefuse",
  );

  if (!preparedForRefuseSuggestions[0]) {
    throw Error(ERRORS.ADMIN_EMPTY_SUGGESTION);
  }

  return preparedForRefuseSuggestions[0];
};

export const refuseSuggestion = async (suggestion: Suggestion, cause: string) => {
  const chatId = String(suggestion.userId);
  await makeMessageToTg({ chatId: chatId, text: "–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω" });
  await makePostToTg({
    post: { photos: suggestion.fileIds, text: suggestion.caption },
    chatId,
  });
  await makeMessageToTg({ chatId: chatId, text: `–ü–æ –ø—Ä–∏—á–∏–Ω–µ:\n${cause}` });
  await makeMessageToTg({
    chatId: chatId,
    text: `–ú–æ–∂–µ—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –ø—Ä–µ–¥–ª–æ–∂–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ`,
  });

  updateSuggestion({ id: suggestion.id, status: "draft" });
};
